@using UCommerce.Content
@using UCommerce.EntitiesV2
@using UCommerce.Extensions
@using UCommerce.Infrastructure
@using UCommerce.Runtime
@using umbraco.MacroEngines
@using UCommerce.Api
@{
    var request = HttpContext.Current.Request;
    var basket = SiteContext.Current.OrderContext.GetBasket();
    var product = SiteContext.Current.CatalogContext.CurrentProduct;
    var umbracoHelper = new Umbraco.Web.UmbracoHelper(Umbraco.Web.UmbracoContext.Current);
    bool? itemAddedToCart = null;

    if (request.HttpMethod == "POST")
    {
        @* View /App_Code/uCommerce/Functions/Product.cshtml for this function *@
        var variant = uCommerce.Functions.Product.GetVariantFromPostData(product, "variation-");

        var quantity = Convert.ToInt32(request.Form["quantity-to-add"]);
        itemAddedToCart = uCommerce.Functions.Basket.AddToBasket("add-to-basket", "quantity-to-add", variant);
        //TransactionLibrary.AddToBasket(quantity, variant.Sku, variant.VariantSku);
        //TransactionLibrary.ExecuteBasketPipeline();

        @* View /App_Code/uCommerce/Functions/Basket.cshtml for this function
            itemAddedToCart = uCommerce.Functions.Basket.AddToBasket("add-to-basket", "quantity-to-add", variant);*@
        @* View /App_Code/uCommerce/Functions/Review.cshtml for this function
            uCommerce.Functions.Review.LeaveReview(product, "review-name", "review-email", "review-rating", "review-headline", "review-text");*@
    }
    else if (request.HttpMethod == "GET")
    {
        if (!String.IsNullOrWhiteSpace(request.QueryString["item-added"]))
        {
            itemAddedToCart = true;
        }
    }

    var inBasket = basket.PurchaseOrder.OrderLines.Any(o => o.Sku == product.Sku);
    var price = CatalogLibrary.CalculatePrice(product);

    var productIncludesTax = SiteContext.Current.CatalogContext.CurrentCatalog.ShowPricesIncludingVAT ? "<abbr title=\"Including\">Inc.</abbr>" : "<abbr title=\"Excluding\">Exc.</abbr>";
    var relatedProducts = @product.GetRelatedProducts().SelectMany(x => x.Value).ToList();

    // It would be better to write this explicitly
    // IEnumerable<IGrouping<ProductDefinitionField, ProductProperty>> uniqueVariants = null;
    // if (product.ProductDefinition.IsProductFamily())
    // {
    //    uniqueVariants = from v in product.Variants.SelectMany(p => p.ProductProperties)
    //                     where v.ProductDefinitionField.DisplayOnSite
    //                     group v by v.ProductDefinitionField
    //                     into g
    //                     select g;
    // }

    var uniqueVariants = from v in product.Variants.SelectMany(p => p.ProductProperties)
                         where v.ProductDefinitionField.DisplayOnSite
                         group v by v.ProductDefinitionField into g
                         select g;
    var uniqueVariantsAlso = product.Variants.ForEach(v => v.GetProperties()).Distinct();
}


<div class="row">
    <div class="columns small-12" id="product-header">
        <div class="page-header">
            <h1>@product.Name</h1>
        </div>
    </div>
</div>
<section class="row align-stretch column-margin" id="product-info">

    <div class="columns small-12">
        <div class="page-content-box">
            @*<div class="row">
                @if (inBasket)
                {
                    <div class="columns small-12 medium-3">
                        <div class="row-fluid">
                            <div class="alert alert-info">
                                @*<button type="button" class="close" data-dismiss="alert">×</button>*@
            @*<p><strong>Note!</strong> This item is already in your basket. <a class="btn btn-primary pull-right" href="/StoreCart">View Your Cart</a></p>
                                </div>
                            </div>
                        </div>
                    }
                </div>*@
            <div class="row">

                <div class="columns small-12 medium-3">
                    <!-- IMAGE -->
                    @{
                        if (product.Variants.Count > 0)
                        {
                            if (!string.IsNullOrEmpty(product.Variants.First().GetPropertyValue<string>("VariableImage")))
                            {
                                var media = product.Variants.First().GetPropertyValue<string>("VariableImage");
                                var mediaSource = umbracoHelper.TypedMedia(media);
                                <img src="@mediaSource.GetCropUrl()" class="main-image" />
                            }
                            else if (!string.IsNullOrEmpty(product.GetPropertyValue<string>("MainProductImage")))
                            {
                                //var media = ObjectFactory.Instance.Resolve<IImageService>().GetImage(product.ThumbnailImageMediaId).Url;
                                var media = product.GetPropertyValue<string>("MainProductImage");
                                var mediaSource = umbracoHelper.TypedMedia(media);
                                <img src="@mediaSource.GetCropUrl()" class="main-image" />
                            }
                            else
                            {
                                <img class="main-image" src="~/umbraco/ucommerce/images/ui/image_not_found.jpg">
                            }

                        }
                        else
                        {

                            if (!string.IsNullOrEmpty(product.GetPropertyValue<string>("MainProductImage")))
                            {
                                //var media = ObjectFactory.Instance.Resolve<IImageService>().GetImage(product.ThumbnailImageMediaId).Url;
                                var media = product.GetPropertyValue<string>("MainProductImage");
                                var mediaSource = umbracoHelper.TypedMedia(media);
                                <img src="@mediaSource.GetCropUrl()" class="main-image" />
                            }
                            else
                            {
                                <img class="main-image" src="~/umbraco/ucommerce/images/ui/image_not_found.jpg">
                            }

                        }
                    }
                </div>
                <div class="columns small-12 medium-9">
                    @if (product.AllowOrdering)
                    {
                        if (itemAddedToCart.HasValue && itemAddedToCart.Value)
                        {

                                <div class="primary callout" data-closable="slide-out-right">
                                    <h5>Added To Cart</h5>
                                    <p>Thanks, this item has been added to your cart. <a href="~/store/cart">Click here to view your cart</a>.</p>
                                    <button class="close-button" aria-label="Dismiss alert" type="button" data-close>
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <script>
                                    $("button.close-button").click(function () {
                                        $(".primary.callout").hide(1000);
                                    });
                                </script>
                        }

                        if (!string.IsNullOrEmpty(product.GetPropertyValue<string>("RetailPrice")))
                        {
                            var retailPrice = product.GetPropertyValue<string>("RetailPrice");
                            <p class="product-price">
                                <span class="retail">&#36;@retailPrice</span>
                                <span class="discounted">@price.YourPrice.Amount.ToString()</span>
                            </p>
                        }
                        else if (price.YourPrice != null)
                        {
                            <p class="product-price">@price.YourPrice.Amount.ToString()</p>
                        }
                        if (product.Variants.Count > 0)
                        {
                            <p class="sku">SKU: @product.Sku (plus options)</p>
                        }
                        else
                        {
                           <p class="sku">SKU: @product.Sku</p>
                        }
                        <form class="product-selection row" method="post">
                         
                            <div class="small-5 columns medium-2">
                                <input type="number" name="quantity-to-add" id="quantity-to-add" value="1" min="1">
                            </div>
                            <div class="small-7 columns medium-10">
                                <label for="quantity" class="text-left">Item(s)</label>
                            </div>
                            @*#### this is where all the options will be set up for products that have variants ###*@
                            @foreach (var prop in uniqueVariants)
                            {
                                var controlName = string.Format("variation-{0}", prop.Key.Name.ToLower());
                                <div class="small-7 columns medium-10">
                                    <label for="@controlName">@prop.Key.GetDisplayName()</label>
                                    <select name="@controlName" id="@controlName" class="variant">
                                        <option value="">-- Please Select --</option>
                                        @foreach (var value in prop.Select(p => p.Value).Distinct())
                                        {
                                            <option value="@value">@value</option>
                                        }
                                    </select>
                                </div>
                            }

                            <input name="product-sku" id="product-sku" type="hidden" value="@product.Sku" />
                            <input name="catalog-id" id="catalog-id" type="hidden" value="@SiteContext.Current.CatalogContext.CurrentCatalog.ProductCatalogId" />

                            <!-- We have to default the button to "success" for those customers who don't have JavaScript enabled -in which case it will still be a clear call to action  -->

                            <div class="small-12 columns">
                                <input name="add-to-basket" id="add-to-basket" class="button secondary hollow" type="submit" value="Add to Cart" />
                            </div>
                        </form>
                        <div class="product-description">
                            <p class="product-description">@Html.Raw(product.ShortDescription())</p>
                        </div>
                    
                    }
                    else
                    {
                        <p>Sorry, the item you are looking for is not currently available.</p>
                    }
                </div>
            </div>
        </div>
    </div>
    @*<div class="columns small-12">
        <ul class="tabs" data-tabs id="store-tabs">
            <li class="tabs-title is-active"><a href="#returns" aria-selected="true">Returns</a></li>
            <li class="tabs-title"><a href="#shipping">Shipping &amp; Delivery</a></li>
        </ul>
        <div class="tabs-content" data-tabs-content="store-tabs">
            <div class="tabs-panel is-active" id="returns">
                <p>This item is non-returnable.</p>
            </div>
            <div class="tabs-panel" id="shipping">
                <p>Vivamus hendrerit arcu sed erat molestie vehicula. Sed auctor neque eu tellus rhoncus ut eleifend nibh porttitor. Ut in nulla enim. Phasellus molestie magna non est bibendum non venenatis nisl tempor. Suspendisse dictum feugiat nisl ut dapibus.</p>
            </div>
        </div>
        </div>*@
    @if (relatedProducts.Any())
    {
        <div class="columns small-12">
            <div class="page-content-box">
                <div class="row">
                    <div class="small-12 columns">
                        <h2>Related products</h2>
                    </div>
                    @foreach (var relatedProduct in @product.GetRelatedProducts().SelectMany(x => x.Value).Take(3))
                {
                        <div class="small-6 columns medium-4">
                            @{
                                if (relatedProduct.Variants.Count > 0)
                                {
                                    if (!string.IsNullOrEmpty(relatedProduct.Variants.First().GetPropertyValue<string>("VariantImage")))
                                    {
                                        var media = relatedProduct.Variants.First().GetPropertyValue<string>("VariantImage");
                                        var mediaSource = umbracoHelper.TypedMedia(media);
                                        <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">
                                            <img src="@mediaSource.GetCropUrl("umbracoFile", "store-product-medium")" class="main-image" />
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">
                                            <img class="main-image" src="http://placehold.it/350x350?text=Image+Not+Available">
                                        </a>                                    }

                                }
                                else
                                {

                                    if (!string.IsNullOrEmpty(relatedProduct.GetPropertyValue<string>("MainProductImage")))
                                    {
                                        //var media = ObjectFactory.Instance.Resolve<IImageService>().GetImage(product.ThumbnailImageMediaId).Url;
                                        var media = relatedProduct.GetPropertyValue<string>("MainProductImage");
                                        var mediaSource = umbracoHelper.TypedMedia(media);
                                        <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">
                                            <img src="@mediaSource.GetCropUrl("umbracoFile", "store-product-medium")" class="main-image" />
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">
                                            <img class="main-image" src="http://placehold.it/350x350?text=Image+Not+Available">
                                        </a>
                                    }

                                }
                            }
                            <div class="row">
                                <div class="small-12 columns">
                                    <h2 class="product-title"><a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">@relatedProduct.DisplayName()</a></h2>
                                </div>
                                <div class="columns small-12">
                                    <form class="list-action" method="post">
                                        <input name="product-sku" id="product-sku" type="hidden" value="@relatedProduct.Sku" />
                                        <input name="product-variantsku" id="product-variantsku" type="hidden" value="@relatedProduct.VariantSku" />
                                        <input name="quantity-to-add" id="quantity-to-add" type="hidden" value="1" />
                                        <input name="catalog-id" id="catalog-id" type="hidden" value="@SiteContext.Current.CatalogContext.CurrentCatalog.ProductCatalogId" />
                                        <input name="product-id" id="product-id" type="hidden" value="@product.Id" />
                                        <div class="button-group expanded">
                                            <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)" class="button primary hollow expanded">Read more</a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                                }
                </div>
            </div>
        </div>
                                }


</section>











@*code below is from demo store*
    @if (inBasket)
    {
        <div class="row-fluid">
            <div class="alert alert-info">
                <button type="button" class="close" data-dismiss="alert">×</button>
                <p><strong>Note!</strong> This item is already in your basket. <a class="btn btn-primary pull-right" href="/cart.aspx">View Your Cart</a></p>
            </div>
        </div>
    }
    @if (itemAddedToCart.HasValue && !itemAddedToCart.Value)
    {
        <div class="row-fluid">
            <div class="alert alert-error">
                <button type="button" class="close" data-dismiss="alert">×</button>
                <p><strong>Oh no!</strong> Something went wrong when we tried to add this to your cart. It could be we don't have the variation you selected. Please try again.</p>
            </div>
        </div>
    }
    @if(product.DisplayOnSite)
    {
    <div id="product-details" class="row-fluid" itemscope itemtype="http://schema.org/Product">
        <div class="span6">
            @if (!string.IsNullOrEmpty(product.PrimaryImageMediaId))
            {
                var media = ObjectFactory.Instance.Resolve<IImageService>().GetImage(product.PrimaryImageMediaId).Url;
                <img src="@media" />
            }
        </div>
        <section class="span6">
            <header class="span12 page-header">
                <h1 itemprop="name">@product.DisplayName()</h1>
                <h6>
                    @if (product.ProductReviews.Any())
                    {
                        <small>
                            @uCommerce.Helpers.ProductReview.DisplayStars(product.Rating)
                        </small>
                    }
                </h6>
                <small><em>@product.ShortDescription()</em></small>
            </header>
            @if(product.AllowOrdering)
            {
            <form method="post">
                <div class="span12 well">
                    <aside class="span5" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
                        <p class="item-price" itemprop="price">@price.YourPrice.Amount</p>
                        <p class="item-tax">@Html.Raw(productIncludesTax) @price.YourTax tax</p>
                    </aside>
                    @if (uniqueVariants.Any())
                    {
                        <div class="span7">
                            @foreach (var prop in uniqueVariants)
                            {
                                var controlName = string.Format("variation-{0}", prop.Key.Name.ToLower());
                                <label for="@controlName">@prop.Key.GetDisplayName()</label>
                                <select name="@controlName" id="@controlName" class="variant">
                                    <option value="">-- Please Select --</option>
                                    @foreach (var value in prop.Select(p => p.Value).Distinct())
                                    {
                                        <option value="@value">@value</option>
                                    }
                                </select>
                            }
                        </div>
                    }

                    <input name="product-sku" id="product-sku" type="hidden" value="@product.Sku" />
                    <input name="quantity-to-add" id="quantity-to-add" type="hidden" value="1" />
                    <input name="catalog-id" id="catalog-id" type="hidden" value="@SiteContext.Current.CatalogContext.CurrentCatalog.ProductCatalogId" />

                    <!-- We have to default the button to "success" for those customers who don't have JavaScript enabled -in which case it will still be a clear call to action  -->
                    <input name="add-to-basket" id="add-to-basket" class="btn btn-block btn-success" type="submit" value="Add to basket" />
                    @if (itemAddedToCart.HasValue && itemAddedToCart.Value)
                    {
                        <div class="alert alert-success item-added">
                            <button type="button" class="close" data-dismiss="alert">×</button>
                            <p>Thanks, this item has been added to your cart. <a href="/cart.aspx">Click here to view your cart</a>.</p>
                        </div>
                    }
                </div>
            </form>
            }else{
                <p>Sorry, the item you are looking for is not currently available.</p>
            }
            <div class="tabbable">
                <ul class="nav nav-tabs">
                    <li class="active"><a href="#product-description" data-toggle="tab">Details</a></li>
                    <li><a href="#delivery-info" data-toggle="tab">Delivery</a></li>
                    <li><a href="#returns-info" data-toggle="tab">Returns</a></li>
                    <li><a href="#customer-reviews" data-toggle="tab">Reviews</a></li>
                </ul>
                <div class="tab-content">
                    <article itemprop="description" id="product-description" class="tab-pane active">
                        @Html.Raw(product.LongDescription())
                    </article>
                    <div id="delivery-info" class="tab-pane">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas placerat elementum tristique. Ut ut pretium massa. Nullam mollis lobortis rutrum. Integer quis tellus enim. Donec viverra aliquam faucibus. Nam ac eros velit. Mauris vel adipiscing turpis. Mauris id tortor et augue tincidunt molestie in sed lectus.</p>
                    </div>
                    <div id="returns-info" class="tab-pane">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas placerat elementum tristique. Ut ut pretium massa. Nullam mollis lobortis rutrum. Integer quis tellus enim. Donec viverra aliquam faucibus. Nam ac eros velit. Mauris vel adipiscing turpis. Mauris id tortor et augue tincidunt molestie in sed lectus.</p>
                    </div>
                    <div id="customer-reviews" class="tab-pane">
                        @if (product.ProductReviews.Any())
                        {
                            <h5>Latest Reviews</h5>
                            foreach (var review in product.ProductReviews)
                            {
                                @uCommerce.Helpers.ProductReview.DisplayReview(review)
                            }
                        }
                        else
                        {
                            <p>No-one has reviewed this product yet.</p>
                        }
                        @uCommerce.Helpers.ProductReview.DisplayReviewForm(product)
                    </div>
                </div>
            </div>
        </section>
    </div>
    <div class="row-fluid">
        @if (relatedProducts.Any())
        {
            <div class="span4 well">
                <h4>Related products</h4>
                @foreach (var relatedProduct in @product.GetRelatedProducts().SelectMany(x => x.Value))
                {
                    <a href="@CatalogLibrary.GetNiceUrlForProduct(relatedProduct)">@relatedProduct.DisplayName()</a>
                }
            </div>
        }
    </div>
    }
    else
    {
        <div>The item you are looking for is not available at the moment.</div>
    }

*@
